import { NextRequest, NextResponse } from 'next/server';

export async function middleware(req: NextRequest) {
  const accessToken = req.cookies.get('accessToken')?.value;
  const refreshToken = req.cookies.get('refreshToken')?.value;
  // üîì –Ø–∫—â–æ —î accessToken ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
  if (accessToken && !isTokenExpired(accessToken)) return NextResponse.next();

  // ‚ùå –Ø–∫—â–æ –Ω–µ–º–∞—î refreshToken ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ login
  if (!refreshToken) {
    return NextResponse.redirect(new URL('/login', req.url));
  }

  // ‚ö° –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–∏—Ç–∏ accessToken —á–µ—Ä–µ–∑ /api/auth/refresh
  const refreshRes = await fetch(`${req.nextUrl.origin}/api/auth/refresh`, {
    method: 'POST',
    headers: {
      Cookie: `refreshToken=${refreshToken}`,
    },
  });

  if (!refreshRes.ok) {
    return NextResponse.redirect(new URL('/login', req.url));
  }

  // ‚õ≥ –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  const newAccessToken = await refreshRes.text();
  const res = NextResponse.next();
  res.cookies.set('accessToken', newAccessToken, {
    httpOnly: true,
    path: '/',
    sameSite: 'strict',
    secure: true,
  });

  return res;
}

// üîí –î–æ–¥–∞–π –¥–æ —è–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏
export const config = {
  matcher: ['/profile/:path*', '/add-ad'],
};
function isTokenExpired(token: string): boolean {
  try {
    const payload = JSON.parse(atob(token.split('.')[1])) as { exp: number };
    const now = Math.floor(Date.now() / 1000);
    return payload.exp < now;
  } catch {
    return true;
  }
}
